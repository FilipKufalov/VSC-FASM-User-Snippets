{
  "Format Binary": {
    "prefix": "format binary",
    "body": "format binary",
    "description": "FASM binary format, default output is .bin but you can give argument like format binary as 'EXE'"
  },
  "Format PE": {
    "prefix": "format PE",
    "body": "format PE",
    "description": "This sets up a 32-bit PE file (for Windows) with a console subsystem. Other subsystems include:\n\nconsole – for console applications\nGUI – for graphical applications\nDLL – for building DLL files"
  },
  "Format PE64": {
    "prefix": "format PE64",
    "body": "format PE64",
    "description": "This sets up a 64-bit PE file (for Windows) with a console subsystem. Other subsystems include:\n\nconsole – for console applications\nGUI – for graphical applications\nDLL – for building DLL files"
  },
  "Format MZ": {
    "prefix": "format MZ",
    "body": "format MZ",
    "description": "This sets up a DOS MZ executable (16-bit), the original format for DOS programs. Used for creating real-mode DOS applications. 'MZ' refers to the initials of Mark Zbikowski, one of the MS-DOS developers."
  },
  "Format COFF": {
    "prefix": "format COFF",
    "body": "format COFF",
    "description": "This sets up a COFF (Common Object File Format) object file, typically used for linking with other object files or libraries. Commonly used as an intermediate format for Windows drivers, DLLs, or static libraries. It does not produce a standalone executable."
  },
  "Format MS COFF": {
    "prefix": "format MS COFF",
    "body": "format MS COFF",
    "description": "This sets up an object file in Microsoft COFF (Common Object File Format), compatible with Microsoft's toolchain (e.g., link.exe). It is used for creating object files that can be linked into Windows executables or DLLs using Microsoft Visual Studio or related tools."
  },
  "Format MS64 COFF": {
    "prefix": "format MS64 COFF",
    "body": "format MS64 COFF",
    "description": "This sets up a 64-bit Microsoft COFF (Common Object File Format) object file, compatible with Microsoft's 64-bit toolchain (e.g., link.exe for x64). Used for building 64-bit Windows executables, DLLs, or static libraries via linking."
  },
  "Format ELF": {
    "prefix": "format ELF",
    "body": "format ELF",
    "description": "This sets up an ELF (Executable and Linkable Format) output, commonly used on Linux and other Unix-like systems. Suitable for creating 32-bit executables or object files for platforms using the ELF binary format."
  },
  "Format ELF64": {
    "prefix": "format ELF64",
    "body": "format ELF64",
    "description": "This sets up an ELF64 (64-bit Executable and Linkable Format) output, used on 64-bit Linux and Unix-like systems. Suitable for creating 64-bit executables or object files compatible with the ELF64 standard."
  },
  "Snippet PE GUI": {
    "prefix": "!pegui",
    "body": [
      "format PE GUI",
      "entry start",
      "",
      "include 'INCLUDE/win32a.inc'",
      "",
      "section '.code' code readable executable",
      "",
      "start:",
      "    invoke  MessageBox, 0, msg, title, 0",
      "    invoke  ExitProcess, 0",
      "",
      "section '.data' data readable writeable",
      "",
      "msg    db 'Hello from 32bit GUI!', 0",
      "title  db 'FASM PE Example', 0",
      "",
      "section '.idata' import data readable writeable",
      "",
      "library kernel32, 'kernel32.dll', \\",
      "        user32,   'user32.dll'",
      "",
      "import kernel32, ExitProcess, 'ExitProcess'",
      "import user32,   MessageBox,  'MessageBoxA'"
    ],
    "description": "A minimal 32-bit Windows PE GUI program using FASM. Displays a message box and exits."
  },
  "Snippet PE Console": {
    "prefix": "!peconsole",
    "body": [
      "format PE console",
      "entry start",
      "",
      "include 'INCLUDE/win32a.inc'",
      "",
      "section '.code' code readable executable",
      "",
      "start:",
      "    invoke  GetStdHandle, -11",
      "    mov     [hConsole], eax",
      "    invoke  WriteConsole, [hConsole], msg, msg_len, written, 0",
      "    invoke  ExitProcess, 0",
      "",
      "section '.data' data readable writeable",
      "",
      "msg       db 'Hello, World!', 13, 10, 0",
      "msg_len   = $ - msg",
      "hConsole  dd ?",
      "written   dd ?",
      "",
      "section '.idata' import data readable writeable",
      "",
      "library kernel32, 'kernel32.dll'",
      "",
      "import kernel32, \\",
      "       GetStdHandle, 'GetStdHandle', \\",
      "       WriteConsole, 'WriteConsoleA', \\",
      "       ExitProcess, 'ExitProcess'"
    ],
    "description": "A minimal 32-bit Windows PE console program using FASM (PE). Writes 'Hello, World!' to the terminal using WriteConsoleA."
  },
  "Snippet PE DLL": {
    "prefix": "!pedll",
    "body": [
      "format PE GUI 5.0 DLL",
      "entry DllEntryPoint",
      "",
      "include 'INCLUDE\\win32a.inc'",
      "",
      "section '.data' readable",
      "  text_test db 'Simple 32bit DLL Program', 0",
      "",
      "section '.code' readable",
      "",
      "proc DllEntryPoint uses ebx esi edi, hinstDLL, fdwReason, lpvReserved",
      "  cmp [fdwReason], DLL_PROCESS_ATTACH",
      "  jne .done",
      "  push 0",
      "  push text_test",
      "  push text_test",
      "  push 0",
      "  call [MessageBox]",
      "  .done:",
      "  ret",
      "endp",
      "",
      "section '.idata' import data readable writeable",
      "library user, 'user32.dll'",
      "import user, \\",
      "  MessageBox, 'MessageBoxA'",
      "",
      "section '.reloc' fixups data readable discardable",
      "",
      "if $ = $$",
      "  dd 0,8  ; generate dummy relocation if none are present",
      "end if"
    ],
    "description": "A basic PE DLL using FASM that shows a MessageBox on process attach. Uses format PE GUI 5.0 DLL."
  },
  "Snippet PE64 Console": {
    "prefix": "!pe64console",
    "body": [
      "format PE64 console",
      "entry start",
      "",
      "include 'INCLUDE/win64a.inc'",
      "",
      "section '.text' code readable executable",
      "",
      "start:",
      "    sub     rsp, 40",
      "    mov     rcx, -11                        ; STD_OUTPUT_HANDLE",
      "    call    [GetStdHandle]",
      "    mov     [hConsole], rax",
      "",
      "    mov     rcx, [hConsole]                 ; HANDLE hConsole",
      "    lea     rdx, [msg]                      ; LPCVOID lpBuffer",
      "    mov     r8, msg_len                     ; DWORD nNumberOfCharsToWrite",
      "    lea     r9, [written]                   ; LPDWORD lpNumberOfCharsWritten",
      "    mov     qword [rsp+32], 0               ; LPVOID lpReserved = NULL",
      "    call    [WriteConsole]",
      "",
      "    xor     ecx, ecx                        ; Exit code 0",
      "    call    [ExitProcess]",
      "",
      "section '.data' data readable writeable",
      "",
      "msg       db 'Hello, World!', 13, 10, 0",
      "msg_len   = $ - msg",
      "hConsole  dq ?",
      "written   dq ?",
      "",
      "section '.idata' import data readable",
      "",
      "library kernel32, 'kernel32.dll'",
      "",
      "import kernel32, \\",
      "       GetStdHandle, 'GetStdHandle', \\",
      "       WriteConsole, 'WriteConsoleA', \\",
      "       ExitProcess, 'ExitProcess'"
    ],
    "description": "A minimal 64-bit Windows PE console program using FASM (PE64). Writes 'Hello, World!' to the terminal using WriteConsoleA."
  },
  "Snippet PE64 GUI": {
    "prefix": "!pe64gui",
    "body": [
      "format PE64 GUI",
      "entry start",
      "",
      "include 'INCLUDE/win64a.inc'",
      "",
      "section '.text' code readable executable",
      "",
      "start:",
      "    sub     rsp, 40                        ; shadow space for Windows x64 calling convention",
      "    xor     rcx, rcx                       ; hWnd = NULL",
      "    lea     rdx, [msg]                     ; LPCSTR lpText",
      "    lea     r8, [title]                    ; LPCSTR lpCaption",
      "    xor     r9d, r9d                       ; uType = 0 (OK button)",
      "    call    [MessageBox]",
      "",
      "    xor     ecx, ecx                       ; Exit code 0",
      "    call    [ExitProcess]",
      "",
      "section '.data' data readable writeable",
      "",
      "msg     db 'Hello from 64bit GUI!', 0",
      "title   db 'FASM PE64 Example', 0",
      "",
      "section '.idata' import data readable",
      "",
      "library kernel32, 'kernel32.dll', \\",
      "        user32,   'user32.dll'",
      "",
      "import kernel32, ExitProcess, 'ExitProcess'",
      "import user32,   MessageBox,  'MessageBoxA'"
    ],
    "description": "A minimal 64-bit Windows GUI program using FASM (PE64). Displays a MessageBox and exits."
  },
  "Snippet PE64 DLL": {
    "prefix": "!pe64dll",
    "body": [
      "format PE64 GUI 5.0 DLL",
      "entry DllEntryPoint",
      "",
      "include 'INCLUDE\\win64a.inc'",
      "",
      "section '.data' data readable writeable",
      "  msg   db 'Simple 64bit DLL Program', 0",
      "  title db 'PE64 DLL', 0",
      "",
      "section '.text' code readable executable",
      "",
      "proc DllEntryPoint hinstDLL, fdwReason, lpvReserved",
      "  cmp edx, DLL_PROCESS_ATTACH",
      "  jne .done",
      "  sub rsp, 28h",
      "  mov rcx, 0",
      "  lea rdx, [msg]",
      "  lea r8,  [title]",
      "  mov r9d, 0",
      "  call [MessageBoxA]",
      "  add rsp, 28h",
      "  .done:",
      "  mov eax, 1",
      "  ret",
      "endp",
      "",
      "section '.idata' import data readable",
      "  library user32, 'user32.dll'",
      "  import user32, MessageBoxA, 'MessageBoxA'",
      "",
      "section '.reloc' fixups data readable discardable",
      "  if $ = $$",
      "    dd 0,8",
      "  end if"
    ],
    "description": "A minimal 64-bit PE DLL using FASM that displays a MessageBox when the DLL is loaded (DLL_PROCESS_ATTACH)."
  },
  "Snippet MS-DOS Hello": {
    "prefix": "!mzdos",
    "body": [
      "; Snippet from: https://raw.githubusercontent.com/tarun-codestien/hello-world-1/refs/heads/master/a/assembler_fasm_dos.asm",
      "format MZ",
      "",
      "entry .code: start",
      "",
      "segment .code",
      "start:",
      "    mov ax, .data    ; put data segment into ax",
      "    mov ds, ax       ; there, I setup the DS for you",
      "    mov dx, msg      ; now I give you the offset in DX. DS:DX now completed.",
      "    mov ah, 9h",
      "    int 21h",
      "    mov ah, 4ch",
      "    int 21h",
      "",
      "segment .data",
      "    msg db 'Hello MS-DOS', '$'"
    ],
    "description": "A simple MS-DOS FASM program that prints 'Hello MS-DOS' using int 21h."
  },
  "Snippet ELF64": {
    "prefix": "!elf64",
    "body": [
      "format ELF64 executable 3",
      "",
      "entry main",
      "",
      "segment readable executable",
      "",
      "main:",
      "    lea   rdi, [msg]           ; rdi = address of msg",
      "    call  strlen               ; get length of msg in rax",
      "    mov   rdx, rax             ; rdx = length",
      "    mov   rsi, rdi             ; rsi = pointer to string",
      "    mov   rdi, 1               ; rdi = stdout",
      "    mov   rax, 1               ; rax = syscall number (sys_write)",
      "    syscall",
      "",
      "    xor   rdi, rdi             ; rdi = 0 (exit code)",
      "    mov   rax, 60              ; rax = syscall number (sys_exit)",
      "    syscall",
      "",
      "strlen:",
      "    push  rdi",
      "    xor   rcx, rcx",
      "    not   rcx                  ; rcx = -1",
      "    xor   al, al",
      "    cld",
      "    repne scasb",
      "    not   rcx",
      "    dec   rcx                 ; subtract 1",
      "    mov   rax, rcx",
      "    pop   rdi",
      "    ret",
      "",
      "segment readable writeable",
      "",
      "msg db 'Linux 64-bit!', 10, 0"
    ],
    "description": "Minimal ELF64 FASM program for Linux that prints 'Linux 64-bit!' using syscalls."
  },
  "Snippet ELF32": {
    "prefix": "!elf32",
    "body": [
      "format ELF executable 3",
      "",
      "entry main",
      "",
      "segment readable executable",
      "",
      "main:",
      "    mov   edx, msg_len         ; edx = length of msg",
      "    mov   ecx, msg             ; ecx = pointer to msg",
      "    mov   ebx, 1               ; ebx = stdout",
      "    mov   eax, 4               ; eax = syscall number (sys_write)",
      "    int   0x80",
      "",
      "    xor   ebx, ebx             ; ebx = 0 (exit code)",
      "    mov   eax, 1               ; eax = syscall number (sys_exit)",
      "    int   0x80",
      "",
      "segment readable writeable",
      "",
      "msg db 'Linux 32-bit!', 10",
      "msg_len = $ - msg"
    ],
    "description": "Minimal ELF32 FASM program for Linux that prints 'Linux 32-bit!' using int 0x80 syscall."
  }
}